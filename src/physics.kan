import "sdl";
import "math";
import "config";
import "graphics" as g;

type Transform struct {
    position: math.Vec2f,
    scale: u32
}

def (t: *Transform) update_with_vel(velocity: math.Vec2f, ts: f32) {
    t.position = t.position.add(velocity.times(ts).times(config.scale() as f32));
}

type Hitbox struct {
    relative_pos: math.Vec2f,
    size: math.Vec2f
}

def hitbox(x: u32, y: u32, w: u32, h: u32): Hitbox {
    return Hitbox {
        relative_pos: math.vec2f(x as f32, y as f32),
        size: math.vec2f(w as f32, h as f32)
    };
}

def (h: Hitbox) as_absolute_rect(transform: Transform): sdl.Rect {
    let position = transform.position.add(h.relative_pos.times(config.scale() as f32));
    return sdl.Rect {
        x: position.x as i32,
        y: position.y as i32,
        w: h.size.x as i32 * (transform.scale as i32),
        h: h.size.y as i32 * (transform.scale as i32)
    };
}

def tile_rect(transform: Transform, hitbox: Hitbox): sdl.Rect {
    let scale = (transform.scale * config.tile_size()) as i32;
    return sdl.Rect {
        x: transform.position.x as i32 / scale,
        y: transform.position.y as i32 / scale,
        w: (hitbox.size.x as u32 / config.tile_size()) as i32,
        h: (hitbox.size.y as u32 / config.tile_size()) as i32
    };
}

def rect_collisions(first: sdl.Rect, second: sdl.Rect, h_collision: *i32, v_collision: *i32) {
    let p_x1 = first.x;
    let p_x2 = first.x + first.w;
    let p_y1 = first.y;
    let p_y2 = first.y + first.h;

    let o_x1 = second.x;
    let o_x2 = second.x + second.w;
    let o_y1 = second.y;
    let o_y2 = second.y + second.h;

    *h_collision = math.max(0, math.min(p_x2, o_x2) - math.max(p_x1, o_x1));
    *v_collision = math.max(0, math.min(p_y2, o_y2) - math.max(p_y1, o_y1));
}

def resolve_collision(first_trans: *Transform, first_hit: Hitbox, second: sdl.Rect) {
    let first = first_hit.as_absolute_rect(*first_trans);

    let h_collision = 0;
    let v_collision = 0;
    rect_collisions(first, second, &h_collision, &v_collision);

    if h_collision < v_collision {
        let is_left = (first.x < second.x);
        if is_left {
            h_collision *= -1;
        }
        first_trans.position.x += h_collision as f32;
    } else {
        let is_over = (first.y < second.y);
        if is_over {
            v_collision *= -1;
        }
        first_trans.position.y += v_collision as f32;
    }
}

type Movement struct {
    velocity: math.Vec2f,
    speed: f32
}
