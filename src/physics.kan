import "sdl";
import "math";
import "graphics" as g;

type Transform struct {
    position: math.Vec2f,
    scale: u32
}

def (t: *Transform) update_with_vel(velocity: math.Vec2f, ts: f32) {
    t.position = t.position.add(velocity.times(ts));
}

type Hitbox struct {
    relative_pos: math.Vec2f,
    size: math.Vec2f
}

def hitbox(x: u32, y: u32, w: u32, h: u32): Hitbox {
    return Hitbox {
        relative_pos: math.vec2f(x as f32, y as f32),
        size: math.vec2f(w as f32, h as f32)
    };
}

def (h: Hitbox) as_absolute_rect(transform: Transform): sdl.Rect {
    let position = transform.position.add(h.relative_pos);
    return sdl.Rect {
        x: position.x as i32,
        y: position.y as i32,
        w: h.size.x as i32 * (transform.scale as i32),
        h: h.size.y as i32 * (transform.scale as i32)
    };
}
