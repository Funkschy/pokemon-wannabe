import ":std/io";
import ":std/str";

import "sdl";
import "math";
import "config";
import "graphics" as g;

let element_width = 3;
let element_height = 22;
let chars_per_row = 18;

type Font struct {
    spritesheet: g.SpriteSheet
}

def (f: *Font) free() {
    f.spritesheet.free();
}

def (f: *Font) get_char(c: i8): g.Sprite {
    let upper = c - 32 * ((c >= 'a' && c <= 'z') as i8);
    let idx = (upper - ',' + 1) as i32;

    return f.spritesheet.get(idx % chars_per_row, idx / chars_per_row);
}

def load_font(renderer: *sdl.Renderer): Font {
    let spec = g.spritesheet_spec(7, 7, "res/gb-font.png");
    let font_spritesheet: g.SpriteSheet = undefined;
    if !g.load_spritesheet_from_png(renderer, spec, &font_spritesheet) {
        io.printf("Could not load sprite: %s\n", sdl.get_error());
        return undefined;
    }

    return Font {
        spritesheet: font_spritesheet
    };
}

type TextBox struct {
    font: Font,
    side: g.Sprite,
    middle: g.Sprite,
    spritesheet: g.SpriteSheet
}

def load(renderer: *sdl.Renderer): TextBox {
    let font = load_font(renderer);

    let spec = g.spritesheet_spec(element_width, element_height, "res/text-box.png");
    let textbox_spritesheet: g.SpriteSheet = undefined;
    if !g.load_spritesheet_from_png(renderer, spec, &textbox_spritesheet) {
        io.printf("Could not load sprite: %s\n", sdl.get_error());
        return undefined;
    }

    return TextBox {
        font: font,
        side: textbox_spritesheet.get(0, 0),
        middle: textbox_spritesheet.get(1, 0),
        spritesheet: textbox_spritesheet
    };
}

def (tb: *TextBox) free() {
    tb.spritesheet.free();
    tb.font.free();
}

def is_word_sep(c: i8): bool {
    return c == ' ' || c == '\n';
}

def render_text(renderer: *sdl.Renderer, text: str.View, font: *Font, pos: math.Vec2f, size: u32) {
    if size == 0 {
        size = font.get_char('A').rect.w;
    }

    for let i: usize = 0; i < text.len; i += 1 {
        let c = text.at(i);
        let sprite = font.get_char(c);

        let dest = sdl.Rect {
            x: pos.x as i32 + i as i32 * size,
            y: pos.y as i32,
            w: size as i32,
            h: size as i32
        };

        g.render_sprite_simple(renderer, &sprite, dest);
    }
}

def (tb: *TextBox) render_box(
    renderer: *sdl.Renderer,
    size: u32,
    side_dist: i32,
    start_height: i32,
    total_width: i32
) {
    let dest = sdl.Rect {
        x: side_dist,
        y: start_height,
        w: element_width,
        h: element_height
    };
    g.render_sprite_simple(renderer, &tb.side, dest);

    let middle_width = total_width - 2 * element_width;
    let middle_x = dest.x + dest.w;
    dest.x = middle_x;
    dest.w = middle_width;
    g.render_sprite_simple(renderer, &tb.middle, dest);

    dest.x = side_dist + middle_width + element_width;
    dest.w = element_width;
    g.render_sprite(renderer, &tb.side, dest, sdl.RendererFlip.Horizontal);
}

def (tb: *TextBox) render(renderer: *sdl.Renderer, text: str.View, size: u32): usize {
    let char_height = size;

    let screen_side_dist = 8;
    let screen_bottom_dist = 8;

    let total_width = config.width() - 2 * screen_side_dist;
    let available_rows = element_height / char_height;

    let border_side_dist = 2;
    let line_dist = 1;

    let start_height = config.height() as i32 - element_height - screen_bottom_dist;
    tb.render_box(renderer, size, screen_side_dist, start_height, total_width);

    let dest = sdl.Rect {
        x: screen_side_dist,
        y: start_height,
        w: size,
        h: size
    };

    let possible_chars_per_row = (total_width / size) as usize;
    let num_printed_chars: usize = 0;

    // skip new lines at the beginning of the text
    while text.len > 0 && text.at(0) == '\n' {
        num_printed_chars += 1;
        text = text.drop(1);
    }

    for let row = 0; row < available_rows && text.len > 0; row += 1 {
        if text.at(0) == '\n' {
            num_printed_chars += 1;
            text = text.drop(1);
            continue;
        }

        let last_fitting_word_start = possible_chars_per_row;
        if possible_chars_per_row < text.len {
            for ; last_fitting_word_start > 0; last_fitting_word_start -= 1 {
                // cut at word boundary instead of the middle of the word
                if text.at(last_fitting_word_start - 1) == ' ' {
                    break;
                }
            }
        }

        let new_line_idx = text.find(str.view("\n", 1));
        // either stop at the first new line or after the last fitting word
        let row_length = math.min(new_line_idx, last_fitting_word_start);

        let x = (border_side_dist + screen_side_dist) as f32;
        let y = (border_side_dist + start_height + row * (char_height + line_dist)) as f32;
        render_text(renderer, text.take(row_length), &tb.font, math.vec2f(x, y), size);

        num_printed_chars += row_length;
        text = text.drop(row_length);
    }

    return num_printed_chars;
}
