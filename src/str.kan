import "num";
import "libc";

type String struct {
    // don't access directly
    len_: usize,
    cap_: usize,
    data_: *i8
}

def create(): String {
    return from_l("", 0);
}

def from(s: *i8): String {
    return from_l(s, libc.strlen(s));
}

def from_l(s: *i8, len: usize): String {
    let max_storage = (sizeof *void as usize) * 3 - 2;

    let str: String = undefined;

    // on x64, we have 24 bytes - len (1 byte) - null terminator
    if len <= max_storage {
        // least significant len bit == 0 => optimized *i8
        str.len_ = len << 1;

        libc.memcpy((&str as *void) + 1, s as *void, len);
        *(&str as *i8 + 1 + len) = '\0';
    } else {
        str.cap_ = len;
        // least significant len bit == 1 => heap allocated *i8
        str.len_ = (len << 1) | 1;
        str.data_ = libc.strndup(s, len);
    }

    return str;
}

def move_l(s: *i8, len: usize): String {
    let max_storage = (sizeof *void as usize) * 3 - 2;

    // don't optimize moved strings
    let str: String = undefined;
    str.cap_ = len;
    // least significant len bit == 1 => heap allocated *i8
    str.len_ = (len << 1) | 1;
    str.data_ = s;

    return str;
}

def (s: *String) len(): usize {
    let len = s.len_;
    let mask = ((~len & 1) << 7) - 1;
    return len & mask >> 1;

    // if s.is_optimized() {
    //     return *(&s.len_ as *i8) >> 1 as usize;
    // }

    // return s.len_ >> 1;
}

def (s: *String) cstring(): *i8 {
    if s.is_optimized() {
        return (s as *i8) + 1;
    }
    return s.data_;
}

def (s: *String) push(other: View) {
    let len = s.len();
    let new_len = len + other.len;

    if s.is_optimized() {
        let max_storage = (sizeof *void as usize) * 3 - 2;

        if  new_len <= max_storage {
            *(&s.len_ as *i8) = (new_len << 1) as i8;
            libc.memcpy((s as *void + 1) + len, other.data as *void, other.len);
            *(s as *i8 + 1 + new_len) = '\0';
        } else {
            let cap = num.next_pow_of_2(new_len as i64 + 1) as usize;
            let data = libc.malloc(cap);

            libc.memcpy(data, s as *void + 1, len);
            libc.memcpy(data + len, other.data as *void, other.len);

            s.data_ = data as *i8;
            *(s.data_ + new_len) = '\0';

            s.len_ = (new_len << 1) | 1;
            s.cap_ = cap;
        }

        return;
    }

    if new_len < s.cap_ {
        libc.memcpy(s.data_ as *void + len, other.data as *void, other.len);
        *(s.data_ + new_len) = '\0';
        s.len_ = (new_len << 1) | 1;
        return;
    }

    let cap = num.next_pow_of_2(new_len as i64 + 1) as usize;
    let data = libc.malloc(cap);

    libc.memcpy(data, s.data_ as *void, len);
    libc.memcpy(data + len, other.data as *void, other.len);

    delete s.data_;
    s.data_ = data as *i8;
    *(s.data_ + new_len) = '\0';

    s.len_ = (new_len << 1) | 1;
    s.cap_ = cap;
}

def (s: *String) is_optimized(): bool {
    return s.len_ & 1 == 0;
}

def (s: *String) view(): View {
    return view(s.cstring(), s.len());
}

def (s: *String) clone(): String {
    return from_l(s.cstring(), s.len());
}

def (s: *String) free() {
    if s.is_optimized() {
        return;
    }
    delete s.data_;
}

def i64_to_string(i: i64): String {
    // the longest i64 has 20 chars + 1 for \0
    let buffer: [21]i8 = undefined;
    libc.snprintf(&buffer[0], 20 as usize, "%ld", i);
    return from(&buffer[0]);
}

type View struct {
    len: usize,
    data: *i8
}

def view(s: *i8, len: usize): View {
    return View {
        len: len, data: s
    };
}

def view_from(s: *i8): View {
    return view(s, libc.strlen(s));
}

def (v: View) eq(other: View): bool {
    return v.len == other.len
        && libc.strncmp(v.data, other.data, v.len) == 0;
}

def (v: View) starts_with(prefix: View): bool {
    return v.len >= prefix.len
        && libc.strncmp(v.data, prefix.data, prefix.len) == 0;
}

def (v: View) ends_with(postfix: View): bool {
    return v.len >= postfix.len
        && libc.strncmp(v.data + (v.len - postfix.len), postfix.data, postfix.len) == 0;
}
