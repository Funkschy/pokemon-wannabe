import ":std/io";
import ":std/str";

import "sdl";
import "res";
import "text";
import "math";
import "scene";
import "config";
import "ecs" as _;
import "arena";
import "input" as i;
import "systems" as s;
import "physics" as p;
import "graphics" as g;
import "components" as _;

delegate def MainLoop(arg: *Game): bool;
extern def emscripten_set_main_loop_arg(loop: MainLoop, arg: *Game, fps: i32, simulate_inf_loop: i32);
extern def exit(rc: i32);

type Game struct {
    debug: bool,
    renderer: *sdl.Renderer,
    window: *sdl.Window,
    scenes: [2]scene.Scene,
    current_scene: *scene.Scene,
    last: i64,
    input: i.InputState,
    ecs: ECS
}

let center: math.Vec2f = undefined;
def mainloop(game: *Game): bool {
    let e: sdl.Event = undefined;
    let delta = sdl.delta(game.last) as f32;
    game.last = sdl.now();

    while e.poll() != 0 {
        if e.common.kind == sdl.EventKind.Quit {
            return false;
        }

        if e.common.kind == sdl.EventKind.KeyDown && e.key_event.keysym.sym == 'g' {
            game.debug = !game.debug;
            let current_scene_index = (game.current_scene - &game.scenes[0]) / sizeof scene.Scene;
            io.printf("debug %d, scene: %d\n", game.debug, current_scene_index);
            continue;
        }

        if e.common.kind == sdl.EventKind.KeyDown && e.key_event.keysym.sym == 'p' {
            let current_scene_index = (game.current_scene - &game.scenes[0]) / sizeof scene.Scene;
            game.current_scene = &game.scenes[(current_scene_index + 1) % 2];
            game.current_scene.load(&game.ecs);
            continue;
        }

        game.input.update_input_map(e);
    }

    game.renderer.set_draw_color(0, 19, 26, 255);
    game.renderer.clear();

    let camera = g.cam(center.add((*game.current_scene.camera_relative_to).times(-1.0)));
    for let i: usize = 0; i < game.ecs.num_systems(); i += 1 {
        game.ecs.get_system(i).update(delta, &camera);
    }
    game.renderer.present();

    return true;
}

def main() {
    if sdl.init(sdl.init_video() | sdl.init_joystick()) < 0 {
        io.printf("Could not init SDL: %s\n", sdl.get_error());
        return;
    }
    defer sdl.quit();

    let flags = sdl.init_png();
    if (sdl.img_init(flags) & flags) != flags {
        io.printf("Coult not init SDL_Image\n");
        return;
    }
    defer sdl.img_quit();

    let display_mode = sdl.get_desktop_display_mode();

    let width = config.width();
    let height = config.height();
    let widthf = width as f32;
    let heightf = height as f32;

    center = math.vec2f(widthf / 2.0, heightf / 2.0);

    let window = sdl.create_window(
        "Quasi Pokemon",
        sdl.window_centered(), sdl.window_centered(),
        display_mode.w / 2, display_mode.h / 2,
        sdl.window_shown() | sdl.window_resizeable()
    );

    if window == null {
        io.printf("Could not init window: %s\n", sdl.get_error());
        return;
    }
    defer window.destroy();

    let renderer = sdl.create_renderer(window, -1, sdl.present_vsync());
    renderer.set_draw_color(0, 19, 26, 255);
    defer renderer.destroy();

    renderer.set_logical_size(config.width(), config.height());
    renderer.set_integer_scale(true);

    let game: Game = undefined;
    game.debug = false;
    game.renderer = renderer;
    game.window = window;

    res.init_spritesheet_specs();
    res.load_spritesheets(game.renderer);
    defer res.free();

    // --- Player ---
    let player_animations = arena.typed(sizeof g.Animation);
    defer player_animations.free();

    let player_spritesheet = res.get(res.Resource.GirlSpriteSheet);
    let player_idle = g.create_animation(player_spritesheet, 4, 0);
    defer player_idle.free();
    let player_run_down = g.create_animation(player_spritesheet, 6, 4);
    defer player_run_down.free();
    let player_run_up = g.create_animation(player_spritesheet, 6, 10);
    defer player_run_up.free();
    let player_run_horizontal = g.create_animation(player_spritesheet, 6, 16);
    defer player_run_horizontal.free();

    let player_anim: [4]g.Animation = undefined;
    player_anim[0] = player_idle;
    player_anim[1] = player_run_down;
    player_anim[2] = player_run_up;
    player_anim[3] = player_run_horizontal;

    let player_graphics = g.simple_anime(&player_anim[0], 4);

    let initial_pos = math.vec2f(0.0, 0.0);
    let player_transform = p.Transform { position: initial_pos };
    let player_hitbox = p.hitbox(0, 0, 16, 16);

    let input = Input {
        last_interact: 0,
        interacting: false
    };

    let player_movement = p.Movement {
        velocity: math.zero_vec2f(),
        speed: 0.1
    };

    let npc_hitbox = p.hitbox (0, 0, 16, 16);

    let textbox = text.load(game.renderer);
    defer textbox.free();

    let textbox_component = TextBox {
        textbox: &textbox
    };

    // --- cat ---
    let cat_anim = g.create_animation(res.get(res.Resource.CatSpriteSheet), 8, 0);
    defer cat_anim.free();
    let cat_graphics = g.simple_anime(&cat_anim, 1);

    let cat_dialog = Interaction {
        hitbox: p.hitbox (-8, -8, 32, 32),
        chars_shown: 0,
        last_state: 0,
        current_state: 0
    };

    let cat_dialog_text = str.view_from("Meow\n\n\nHey Kid\nyou got some Catnip?");

    let cat_initial_pos = math.vec2f(-30.0, -30.0);
    let cat_transform = p.Transform { position: cat_initial_pos };

    // --- thot ---
    let thot_anim = g.create_animation(res.get(res.Resource.ThotSpriteSheet), 8, 0);
    defer thot_anim.free();
    let thot_graphics = g.simple_anime(&thot_anim, 1);
    let thot_transform = p.Transform { position: math.vec2f(50.0, 40.0) };

    let thot_dialog = Interaction {
        hitbox: p.hitbox (-8, -8, 32, 32),
        chars_shown: 0,
        last_state: 0,
        current_state: 0
    };

    let thot_dialog_text = str.view_from(
        "Follow me on twitch, Instagram, Snapchat, Twitter, Youtube\nand onlyfans"
    );

    // --- wall ---
    let background_spritesheet = res.get(res.Resource.BackgroundSpriteSheet);
    let background_tile_size = 8;
    let background_tile_sizef = 8.0;

    let wall_h = 16;
    let wall_transform = p.Transform {
        position: math.vec2f(-center.x, -center.y)
    };
    let wall_sprite = background_spritesheet.get(0, 0);
    let wall_graphics = g.Graphics {
        sprite: &wall_sprite,
        flip: sdl.RendererFlip.None
    };

    let wall_rep = g.RepeatedGraphics {
        inner: wall_graphics,
        reps_w: config.width() / background_tile_size,
        reps_h: 2
    };
    let wall_hitbox = p.hitbox (0, 0, config.width(), wall_h);

    // --- floor ---
    let floor_transform = p.Transform {
        position: math.vec2f(-center.x, wall_h as f32 - center.y)
    };
    let floor_sprite = background_spritesheet.get(1, 0);
    let floor_graphics = g.Graphics {
        sprite: &floor_sprite,
        flip: sdl.RendererFlip.None
    };
    let floor_rep = g.RepeatedGraphics {
        inner: floor_graphics,
        reps_w: config.width() / background_tile_size,
        reps_h: (config.height() - wall_h) / background_tile_size
    };

    let floor_sprite2 = background_spritesheet.get(2, 0);
    let floor_graphics2 = g.Graphics {
        sprite: &floor_sprite2,
        flip: sdl.RendererFlip.None
    };
    let floor_rep2 = g.RepeatedGraphics {
        inner: floor_graphics2,
        reps_w: config.width() /  background_tile_size,
        reps_h: (config.height() - wall_h) /  background_tile_size
    };

    // --- grass ---
    let grass_tiles = 100.0;
    let grass_size = grass_tiles * background_tile_sizef;
    let grass_transform = p.Transform {
        position: math.vec2f(-grass_size/2.0, -grass_size/2.0)
    };
    let grass_sprite = background_spritesheet.get(3, 0);
    let grass_graphics = g.Graphics {
        sprite: &grass_sprite,
        flip: sdl.RendererFlip.None
    };
    let grass_rep = g.RepeatedGraphics {
        inner: grass_graphics,
        reps_w: grass_tiles as i32,
        reps_h: grass_tiles as i32
    };

    // --- bush ---
    let num_bushes = 5;
    let bushes: [5]p.Transform = undefined;
    {
        let i = -1;
        bushes[i += 1] = p.transform(5.0  * background_tile_sizef, 4.0  * background_tile_sizef);
        bushes[i += 1] = p.transform(-3.0 * background_tile_sizef, 1.0  * background_tile_sizef);
        bushes[i += 1] = p.transform(-6.0 * background_tile_sizef, -3.0 * background_tile_sizef);
        bushes[i += 1] = p.transform(2.0  * background_tile_sizef, 2.0  * background_tile_sizef);
        bushes[i += 1] = p.transform(3.0  * background_tile_sizef, -3.0 * background_tile_sizef);
    }

    let bush_sprite = background_spritesheet.get(0, 1);
    let bush_graphics = g.Graphics {
        sprite: &bush_sprite,
        flip: sdl.RendererFlip.None
    };
    // bush is a repeated graphics (even tho we currently don't repeat it), so that it's in the bg
    let bush_rep = g.RepeatedGraphics {
        inner: bush_graphics,
        reps_w: 1,
        reps_h: 1
    };

    // --- clock ---
    let clock_sprite = res.get(res.Resource.ClockSpriteSheet).get(0, 0);
    let clock_graphics = g.Graphics {
        sprite: &clock_sprite,
        flip: sdl.RendererFlip.None
    };
    let clock_initial_pos = math.vec2f(60.0, -center.y);
    let clock_transform = p.Transform { position: clock_initial_pos };
    let clock_hitbox = p.hitbox (0, 16, 16, 16);

    // --- house ---
    let house_sprite = res.get(res.Resource.HouseSpriteSheet).get(0, 0);
    let house_graphics = g.Graphics {
        sprite: &house_sprite,
        flip: sdl.RendererFlip.None
    };
    // see bush
    let house_rep = g.RepeatedGraphics {
        inner: house_graphics,
        reps_w: 1,
        reps_h: 1
    };
    let house_initial_pos = math.vec2f(60.0, -center.y);
    let house_transform = p.Transform { position: house_initial_pos };
    let house_hitbox = p.hitbox (0, 0, 77, 53);
    let house_monologue = Interaction {
        hitbox: p.hitbox (0, 50, 77, 20),
        chars_shown: 0,
        last_state: 0,
        current_state: 0
    };

    let house_monologue_text = str.view_from(
        "It almost feels as if the developer was too lazy to finish the sprite"
    );


    game.ecs = create_ecs();
    defer game.ecs.free();

    // systems are popped last to first, so the last sys runs first
    let repeated_render_sys = s.repeated_render_system(&game.ecs, game.renderer);
    game.ecs.add_system(&repeated_render_sys.s);

    let anim_render_sys = s.animation_render_system(&game.ecs, game.renderer);
    game.ecs.add_system(&anim_render_sys.s);

    let sprite_render_sys = s.sprite_render_system(&game.ecs, game.renderer);
    game.ecs.add_system(&sprite_render_sys.s);

    let text_render_sys = s.text_render_system(&game.ecs, game.renderer);
    game.ecs.add_system(&text_render_sys.s);

    let movement_sys = s.movement_system(&game.ecs);
    game.ecs.add_system(&movement_sys.s);

    let input_sys = s.input_system(&game.ecs, &game.input);
    game.ecs.add_system(&input_sys.s);

    let collision_sys = s.collision_system(&game.ecs);
    game.ecs.add_system(&collision_sys.s);

    let interaction_sys = s.interaction_system(&game.ecs, &game.input);
    game.ecs.add_system(&interaction_sys.s);

    let debug_render_sys = s.debug_render_system(&game.ecs, game.renderer, &game.debug, textbox.font);
    game.ecs.add_system(&debug_render_sys.s);

    let zero = math.vec2f(0.0, 0.0);
    let start_room = scene.create(&zero);
    // player
    start_room.add_entity()
        .add_anime(&player_graphics)
        .add_transform(&player_transform)
        .add_input(&input)
        .add_movement(&player_movement)
        .add_hitbox(&player_hitbox)
        .add_debug_tracking();
    // wall
    start_room.add_entity()
        .add_transform(&wall_transform)
        .add_repeated(&wall_rep)
        .add_hitbox(&wall_hitbox);
    // floor
    start_room.add_entity()
        .add_component(ComponentKind.Transform, &floor_transform as *void)
        .add_component(ComponentKind.RepeatedGraphics, &floor_rep as *void);
    // clock
    start_room.add_entity()
        .add_component(ComponentKind.Transform, &clock_transform as *void)
        .add_component(ComponentKind.Graphics, &clock_graphics as *void)
        .add_component(ComponentKind.Hitbox, &clock_hitbox as *void);

    game.scenes[0] = start_room;

    let outside = scene.create(&player_transform.position);
    // player
    outside.add_entity()
        .add_component(ComponentKind.AnimatedGraphics, &player_graphics as *void)
        .add_transform(&player_transform)
        .add_input(&input)
        .add_movement(&player_movement)
        .add_hitbox(&player_hitbox)
        .add_debug_tracking();
    // cat
    outside.add_entity()
        .add_anime(&cat_graphics)
        .add_transform(&cat_transform)
        .add_hitbox(&npc_hitbox)
        .add_interaction(&cat_dialog);
    outside.add_entity()
        .add_textbox(&textbox_component)
        .add_interaction(&cat_dialog)
        .add_str(&cat_dialog_text);
    // thot
    outside.add_entity()
        .add_anime(&thot_graphics)
        .add_transform(&thot_transform)
        .add_hitbox(&npc_hitbox)
        .add_interaction(&thot_dialog);
    outside.add_entity()
        .add_textbox(&textbox_component)
        .add_interaction(&thot_dialog)
        .add_str(&thot_dialog_text);
    // grass
    outside.add_entity()
        .add_transform(&grass_transform)
        .add_repeated(&grass_rep);
    // bush
    for let i = 0; i < num_bushes; i += 1 {
        outside.add_entity()
            .add_transform(&bushes[i])
            .add_repeated(&bush_rep);
    }
    // house
    outside.add_entity()
        .add_transform(&house_transform)
        .add_repeated(&house_rep)
        .add_hitbox(&house_hitbox)
        .add_interaction(&house_monologue);
    outside.add_entity()
        .add_textbox(&textbox_component)
        .add_interaction(&house_monologue)
        .add_str(&house_monologue_text);

    game.scenes[1] = outside;

    game.current_scene = &game.scenes[0];
    game.current_scene.load(&game.ecs);

    game.last = sdl.now();
    game.input = i.init_input_map();
    defer game.input.free();


    let running = true;
    while running {
        running = mainloop(&game);
    }

    // emscripten_set_main_loop_arg(&mainloop, &game, -1, 1);
}
