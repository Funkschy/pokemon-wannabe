import "io";
import "sdl";
import "str";
import "npc";
import "world";
import "config";
import "input" as i;
import "player" as p;
import "objects" as o;
import "graphics" as g;

delegate def MainLoop(arg: *Game);
extern def emscripten_set_main_loop_arg(loop: MainLoop, arg: *Game, fps: i32, simulate_inf_loop: i32);

type Game struct {
    renderer: *sdl.Renderer,
    window: *sdl.Window,
    world: world.World,
    last: i64,
    input: i.InputState,

    player: p.Player,

    cat: *npc.Npc,
    thot: *npc.Npc,
    bed: *o.Object,
    clock: *o.Object,
    table: *o.Object
}

def mainloop(g: *Game) {
    let e: sdl.Event = undefined;
    let delta = sdl.delta(g.last) as f32;
    g.last = sdl.now();

    while e.poll() != 0 {
        if e.common.kind == sdl.EventKind.Quit {
            return;
        }

        g.input.update_input_map(e);
    }

    g.player.update(delta, &g.input, &g.world);

    g.renderer.clear();
    g.world.render_background(g.renderer);

    for let i: usize = 0; i < g.world.objects.len; i += 1 {
        let obj = g.world.objects.get(i) as *o.Object;
        g.player.resolve_collision(obj.abs_rect());
        obj.render(g.renderer);
    }

    for let i: usize = 0; i < g.world.npcs.len; i += 1 {
        let npc = g.world.npcs.get(i) as *npc.Npc;
        npc.update(delta);
        g.player.resolve_collision(npc.abs_rect());
        npc.render(g.renderer);
    }

    g.player.render(g.renderer);
    g.world.render_hud(g.renderer);

    g.renderer.present();
}

def main() {
    if sdl.init(sdl.init_video() | sdl.init_joystick()) < 0 {
        io.printf("Could not init SDL: %s\n", sdl.get_error());
        return;
    }
    defer sdl.quit();

    let flags = sdl.init_png();
    if (sdl.img_init(flags) & flags) != flags {
        io.printf("Coult not init SDL_Image\n");
        return;
    }
    defer sdl.img_quit();

    let display_mode = sdl.get_desktop_display_mode();
    config.set_scale(display_mode.h as u32 / config.pixel_height() / 2);

    let width = config.pixel_width();
    let height = config.pixel_height();

    let window = sdl.create_window(
        "Quasi Pokemon",
        sdl.window_centered(), sdl.window_centered(),
        width, height,
        sdl.window_shown()
    );

    if window == null {
        io.printf("Could not init window: %s\n", sdl.get_error());
        return;
    }
    defer window.destroy();

    let renderer = sdl.create_renderer(window, -1, sdl.present_vsync());
    renderer.set_draw_color(0, 19, 26, 255);
    defer renderer.destroy();

    // let joystick: *sdl.Joystick = null;
    // if sdl.num_joysticks() > 0 && (joystick = sdl.open_joystick(0)) == null {
    //     io.printf("Could not open joystick: %s\n", sdl.get_error());
    //     return;
    // }
    // defer joystick.close();

    let game: Game = undefined;
    game.renderer = renderer;
    game.window = window;

    game.world = world.create(
        renderer,
        config.width() / config.tile_size(),
        config.height() / config.tile_size()
    );
    defer game.world.free();

    game.player = p.load(renderer, width / 2, height / 2);
    defer game.player.free();
    game.player.current_animation = &game.player.idle_animation;

    game.cat = npc.load(renderer, npc.Kind.WithDialog, "res/cat.png", 8, 3, 1);
    game.cat.data.with_dialog.dialog_text = str.from(
        "Meow\n\n\nHey Kid\nyou got some Catnip?"
    );
    game.cat.data.with_dialog.basic.flip = sdl.RendererFlip.Horizontal;
    game.world.add_npc(game.cat);

    game.thot = npc.load(renderer, npc.Kind.WithDialog, "res/thot.png", 12, 14, 5);

    game.thot.data.with_dialog.dialog_text = str.from(
        "Follow me on twitch, Instagram, Snapchat, Twitter, Youtube\nand onlyfans"
    );
    game.world.add_npc(game.thot);

    game.bed = o.load(renderer, 1, 1, 16, 32, "res/bed.png");
    game.world.add_object(game.bed);
    game.clock = o.load(renderer, 18, 0, 16, 32, "res/clock.png");
    game.world.add_object(game.clock);
    game.table = o.load(renderer, 10, 9, 16, 32, "res/table.png");
    game.world.add_object(game.table);

    game.last = sdl.now();
    game.input = i.init_input_map();

    emscripten_set_main_loop_arg(&mainloop, &game, -1, 1);
}
