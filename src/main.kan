import "io";
import "sdl";
import "str";
import "npc";
import "world";
import "config";
import "ptrvec";
import "input" as i;
import "player" as p;
import "graphics" as g;

def main() {
    if sdl.init(sdl.init_video() | sdl.init_joystick()) < 0 {
        io.printf("Could not init SDL: %s\n", sdl.get_error());
        return;
    }
    defer sdl.quit();

    let flags = sdl.init_png();
    if (sdl.img_init(flags) & flags) != flags {
        io.printf("Coult not init SDL_Image\n");
        return;
    }
    defer sdl.img_quit();

    let display_mode = sdl.get_desktop_display_mode();
    config.set_scale(display_mode.h as u32 / config.pixel_height() / 2);

    let width = config.pixel_width();
    let height = config.pixel_height();

    let window = sdl.create_window(
        "Quasi Pokemon",
        sdl.window_centered(), sdl.window_centered(),
        width, height,
        sdl.window_shown()
    );

    if window == null {
        io.printf("Could not init window: %s\n", sdl.get_error());
        return;
    }
    defer window.destroy();

    let renderer = sdl.create_renderer(window, -1, sdl.present_vsync());
    renderer.set_draw_color(50, 50, 50, 255);
    defer renderer.destroy();

    let joystick: *sdl.Joystick = null;
    if sdl.num_joysticks() > 0 && (joystick = sdl.open_joystick(0)) == null {
        io.printf("Could not open joystick: %s\n", sdl.get_error());
        return;
    }
    defer joystick.close();

    let world = world.create(
        renderer,
        config.width() / config.tile_size(),
        config.height() / config.tile_size()
    );
    defer world.free();

    let player = p.load(renderer, width / 2, height / 2);
    defer player.free();
    player.current_animation = &player.idle_animation;

    let npcs = ptrvec.create();
    let cat = npc.load(
        renderer, npc.Kind.WithDialog, "res/cat.png", 8, width / 3, height / 3
    );
    cat.data.with_dialog.dialog_text = str.from("Meow\n\n\nHey Kid\nyou got some Catnip?");
    world.add_npc(cat);

    let girl = npc.load(
        renderer, npc.Kind.WithDialog, "res/thot.png", 12, 3 * (width / 4), height / 3
    );
    girl.data.with_dialog.dialog_text = str.from("Subscribe on twitch.tv\n\n\nand onlyfans");
    world.add_npc(girl);

    let e: sdl.Event = undefined;
    let last = sdl.now();
    let input = i.init_input_map();

    while true {
        let delta = sdl.delta(last) as f32;
        last = sdl.now();

        while e.poll() != 0 {
            if e.common.kind == sdl.EventKind.Quit {
                return;
            }

            input.update_input_map(e);
        }

        player.update(delta, &input, &world);

        renderer.clear();

        for let i: usize = 0; i < world.npcs.len; i += 1 {
            let npc = world.npcs.get(i) as *npc.Npc;
            npc.update(delta);
            player.resolve_collision(npc.abs_rect());
            npc.render(renderer);
        }

        player.render(renderer);
        world.render_hud(renderer);

        renderer.present();
    }
}
